# -*- coding: utf-8 -*-
"""simple Unet model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I8g51-Pqg52Ul-u6ocoDm89gx6851bjn

Data import
"""

import tensorflow as tf
import keras

from tensorflow.keras.models import Model, load_model
from tensorflow.keras.layers import Input, Dropout, Lambda, Conv2D, Conv2DTranspose, MaxPooling2D, UpSampling2D, concatenate
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras import backend as K

inputs = Input((432,288,1))
s = Lambda(lambda x: x / 255) (inputs)

c1 = Conv2D(filters = 16, kernel_size = (3, 3), activation = 'relu', kernel_initializer='he_normal', padding='same')(s)
p1 = MaxPooling2D((2,2))(c1)

c2 = Conv2D(128, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (p1)
c2 = Conv2D(128, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c2)

u3 = Conv2DTranspose(filters = 16, kernel_size = (2, 2), strides=(2, 2), padding='same') (c2)
u3 = concatenate([u3, c1], axis=3)
c3 = Conv2D(16, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (u3)
c3 = Dropout(0.1) (c3)
c3 = Conv2D(16, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c3)


outputs = Conv2D(1, (1,1), activation = 'sigmoid')(c3)

model = Model(inputs=[inputs], outputs=[outputs])
model.compile(optimizer='adam', loss = 'binary_crossentropy')
model.summary()

