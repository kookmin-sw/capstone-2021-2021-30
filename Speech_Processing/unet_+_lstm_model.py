# -*- coding: utf-8 -*-
"""Unet + LSTM model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pSJiF9JiaEs5Pe3E5nUgRBajPMhRpubZ

#Data import
"""

import numpy as np
import json

"""Sign language key point"""

with open('weather-signlang.json', 'r') as f:

    json_data = json.load(f)

print(json.dumps(json_data))

json_data['left_elbow']['x']

"""Spectogram"""

from PIL import Image

#rgba_img = Image.open('weather_spectogram_notitle.png')

rgba_img = Image.open('test-weather-2.png')

img = rgba_img.convert('L')

img

import tensorflow as tf

image_array  = tf.keras.preprocessing.image.img_to_array(img)

data = tf.convert_to_tensor(image_array, dtype=tf.float32)

data



"""#Unet model"""

import tensorflow as tf
import keras

from tensorflow.keras.models import Model, load_model
from tensorflow.keras.layers import Input, Dropout, Lambda, Conv2D, Conv2DTranspose, MaxPooling2D, UpSampling2D, concatenate
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras import backend as K

from keras.models import Sequential
from keras.layers import Dense, Flatten, Embedding, LSTM, Bidirectional, Reshape

IMAGE_WIDTH = 288
IMAGE_HEIGHT = 432
IMAGE_CHANNEL = 1

inputs = Input((IMAGE_WIDTH, IMAGE_HEIGHT,IMAGE_CHANNEL))
s = Lambda(lambda x: x / 255) (inputs)

c1 = Conv2D(filters = 16, kernel_size = (3, 3), activation = 'relu', kernel_initializer='he_normal', padding='same')(s)
p1 = MaxPooling2D((2,2))(c1)

c2 = Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same') (p1)
c2 = Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same') (c2)

u3 = Conv2DTranspose(filters = 16, kernel_size = (2, 2), strides=(2, 2), padding='same') (c2)
u3 = concatenate([u3, c1], axis=3)
c3 = Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same') (u3)
c3 = Dropout(0.1) (c3)
c3 = Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same') (c3)


x = Conv2D(1, (1,1), activation = 'sigmoid')(c3)

x = Reshape((288,432))(x)
x = Bidirectional(LSTM(216, return_sequences=True))(x)
x = Bidirectional(LSTM(216))(x)

x_outputs = Dense(1, name = 'x')(x)
y_outputs = Dense(1, name = 'y')(x)

model = Model(inputs=[inputs], outputs=[x_outputs,y_outputs])

model.summary()

tf.keras.utils.plot_model(model, 'U-net_and_LSTM_model.png', show_shapes=True)

"""# Train"""

print(np.shape(data))

model.compile(optimizer='Adam', # optimizer의 name 혹은 함수 객체 설정
           loss='mse', 
           metrics=['mae'])

num_epochs = 10
batch_size = 100

model.fit(data, json_data, epochs=num_epochs, batch_size = batch_size)



